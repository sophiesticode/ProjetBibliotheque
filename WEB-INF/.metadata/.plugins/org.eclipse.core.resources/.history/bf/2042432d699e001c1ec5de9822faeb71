package persistance;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;


import mediatek2022.*;

// classe mono-instance  dont l'unique instance est connue de la médiatheque
// via une auto-déclaration dans son bloc static

public class MediathequeData implements PersistentMediatheque {
// Jean-François Brette 01/01/2018
	static {
		Mediatheque.getInstance().setData(new MediathequeData());
		
		Connexion.ouvrirConnection();
	}
	
	private static Connection c;

	private MediathequeData() {
		
	}
	

	

	// renvoie la liste de tous les documents disponibles de la médiathèque
	@Override
	public List<Document> tousLesDocumentsDisponibles() {
		Connexion.ouvrirConnection();
		
		List<Document> docs = new ArrayList<>();
		try {
			Statement requeteStatique = c.createStatement();
			ResultSet tableResultat = requeteStatique.executeQuery
				("SELECT * FROM Document;");
			if (!tableResultat.next()) {
				return null; //Aucun document dans la BD de la médiathèque
			} 
			else do {
				
				int type = tableResultat.getInt("type");
				int num = tableResultat.getInt("num");
				String titre = tableResultat.getString("titre");
				String de = tableResultat.getString("de");
				String categorie = tableResultat.getString("categorie");
				String anneeParution = tableResultat.getString("anneeParution");
				
				int idAbonne = tableResultat.getInt("idAbonne");
				
				requeteStatique = c.createStatement();
				ResultSet tableResultatSpe = null;
				
				switch(type) {
				case 1: //CD
					tableResultatSpe = requeteStatique.executeQuery
						("SELECT * FROM Document, CD WHERE " + num + " = CD.numDoc;");
					if (tableResultatSpe.next()) {
						int nbMorceaux = tableResultatSpe.getInt("nbMorceaux");
						docs.add(new Document_CD(num, titre, anneeParution, idAbonne, categorie, de, nbMorceaux)); break;
					}
				case 2: //DVD
					tableResultatSpe = requeteStatique.executeQuery
						("SELECT * FROM Document, DVD WHERE " + num + " = DVD.numDoc;");
					if (tableResultatSpe.next()) {
						String duree = tableResultatSpe.getString("duree");
						int ageLimite = tableResultatSpe.getInt("ageLimite");
						docs.add(new Document_DVD(num, titre, anneeParution, idAbonne, categorie, de, duree, ageLimite)); break;
					}
				case 3: //Livre
					tableResultatSpe = requeteStatique.executeQuery
						("SELECT * FROM Document, Livre WHERE " + num + " = Livre.numDoc;");
					if (tableResultatSpe.next()) {
						int nbPages = tableResultatSpe.getInt("nbPages");
						System.out.println(nbPages);
						docs.add(new Document_Livre(num, titre, anneeParution, idAbonne, categorie, de, nbPages)); break;
					}
				}

			} while (tableResultat.next());
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		Connexion.fermerConnection();
		return docs;
	}

	// va récupérer le User dans la BD et le renvoie
	// si pas trouvé, renvoie null
	@Override
	public Utilisateur getUser(String login, String password) {
		Connexion.ouvrirConnection();
		
		Statement requeteStatique;
		ResultSet tableResultat = null;

		try {
			requeteStatique = c.createStatement();
			// recherche parmi les abonnés
			tableResultat = requeteStatique.executeQuery
					("SELECT * FROM Utilisateur WHERE Utilisateur.login = '" + login +"' and Utilisateur.mdp = '" + password + "'");
			if (tableResultat.next()) {
				int id = tableResultat.getInt("id");
				
				requeteStatique = c.createStatement();
				ResultSet tableResultatAbonne = requeteStatique.executeQuery
					("SELECT * FROM Abonne, Utilisateur WHERE " + id + " = Abonne.id;");
				
				
				if (tableResultatAbonne.next()) {
					int age = tableResultatAbonne.getInt("age");
					int abDesactive = tableResultatAbonne.getInt("abDesactive");
					fermerConnection();	
					return new Abonne(id, login, age, abDesactive);
				}
				
				fermerConnection();	
				return new Bibliothecaire(id, login);
				
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		Connexion.fermerConnection();
		return null;
	}
	
	// va récupérer le document de numéro numDocument dans la BD
	// et le renvoie
	// si pas trouvé, renvoie null
	@Override
	public Document getDocument(int numDocument) {
		Connexion.ouvrirConnection();
		
		try {
			Statement requeteStatique = c.createStatement();
			ResultSet tableResultat = requeteStatique.executeQuery
				("SELECT * FROM Document WHERE num = " + numDocument + ";");
			if (!tableResultat.next()) {
				return null; //Aucun document dans la BD de la médiathèque
			} 
			else do {
				int type = tableResultat.getInt("type");
				int num = tableResultat.getInt("num");
				String titre = tableResultat.getString("titre");
				String de = tableResultat.getString("de");
				String categorie = tableResultat.getString("categorie");
				String anneeParution = tableResultat.getString("anneeParution");
				
				int idAbonne = tableResultat.getInt("idAbonne");
				
				requeteStatique = c.createStatement();
				ResultSet tableResultatSpe = null;
				
				switch(type) {
				case 1: //CD
					tableResultatSpe = requeteStatique.executeQuery
						("SELECT * FROM Document, CD WHERE " + num + " = CD.numDoc;");
					if (tableResultatSpe.next()) {
						int nbMorceaux = tableResultatSpe.getInt("nbMorceaux");
						return new Document_CD(num, titre, anneeParution, idAbonne, categorie, de, nbMorceaux);
					}
				case 2: //DVD
					tableResultatSpe = requeteStatique.executeQuery
						("SELECT * FROM Document, DVD WHERE " + num + " = DVD.numDoc;");
					if (tableResultatSpe.next()) {
						String duree = tableResultatSpe.getString("duree");
						int ageLimite = tableResultatSpe.getInt("ageLimite");
						return new Document_DVD(num, titre, anneeParution, idAbonne, categorie, de, duree, ageLimite);
					}
				case 3: //Livre
					tableResultatSpe = requeteStatique.executeQuery
						("SELECT * FROM Document, Livre WHERE " + num + " = Livre.numDoc;");
					if (tableResultatSpe.next()) {
						int nbPages = tableResultatSpe.getInt("nbPages");
						System.out.println(nbPages);
						return new Document_Livre(num, titre, anneeParution, idAbonne, categorie, de, nbPages);
					}
				}

			} while (tableResultat.next());
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		Connexion.fermerConnection();
		return null;
	}

	@Override
	public void ajoutDocument(int type, Object... args) {
		// args[0] -> le titre
		// args [1] --> l'auteur
		// etc... variable suivant le type de document
		Connexion.ouvrirConnection();
		try {
		Statement requeteStatique = c.createStatement();
		
		String requeteInsertDoc = "INSERT INTO Document (type, titre, de, categorie, anneeParution) VALUES (" 
				+ type + ", "
				+ (char)39 + args[0] + (char)39 + ", "
				+ (char)39 + args[1] + (char)39 + ", "
				+ (char)39 + args[2] + (char)39 + ", "
				+ (char)39 + args[3] + (char)39 + ");";
		requeteStatique.executeUpdate(requeteInsertDoc);
		
		requeteStatique = c.createStatement();
		String requeteSelectDoc = "SELECT num FROM Document WHERE titre LIKE "+ (char)39 + args[0] + (char)39 + ";";
		ResultSet tableResultat = requeteStatique.executeQuery(requeteSelectDoc);
		int numDoc = 0;
		if (tableResultat.next()) {
			numDoc = tableResultat.getInt("num");
		
			String requeteInsertSpe = null;
			requeteStatique = c.createStatement();
			switch(type) {
			case 1: requeteInsertSpe="INSERT INTO CD (numDoc, nbMorceaux) VALUES (" + numDoc + ", " + args[4] + ");"; break;
			case 2: requeteInsertSpe="INSERT INTO DVD (numDoc, duree, ageLimite) VALUES (" + numDoc + ", " + (char)39 + args[4] + (char)39 + ", " + args[5] + ");";break;
			case 3: requeteInsertSpe="INSERT INTO Livre (numDoc, nbPages) VALUES (" + numDoc + ", " + args[4] + ");";break;
			}
			requeteStatique.executeUpdate(requeteInsertSpe);
		}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		Connexion.fermerConnection();
	}
	
	// permet d'actualiser la BD de l'emprunt du document numéro numDoc par l'abonné d'id num_a
	public static synchronized void empruntDocument(int numDoc, int num_a) {
		
	}
	
	// permet d'actualiser la BD du retour du document numéro numDoc
	public static synchronized void retourDocument(int numDoc) {
		Connexion.ouvrirConnection();
		try {
			Statement requeteStatique = c.createStatement();
			requeteStatique.executeUpdate
			  ("UPDATE Document SET idAbonne=null WHERE num=" + numDoc + ";");
		} catch (SQLException e) {
			e.printStackTrace();
		}
		Connexion.fermerConnection();
	}
	
	

}
